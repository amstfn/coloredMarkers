h1{
    text-align: center;
}
    /* Your marker would look better if it was centered on the page. An easy way to do that is with the margin shorthand property.
    In the last project, you set the margin area of elements separately with properties like margin-top and margin-left. The margin shorthand property makes it easy to set multiple margin areas at the same time.
    To center your marker on the page, set its margin property to auto. This sets margin-top, margin-right, margin-bottom, and margin-left all to auto. */
    /* While you have three separate marker div elements, they look like one big rectangle. You should add some space between them to make it easier to see each element.
    When the shorthand margin property has two values, it sets margin-top and margin-bottom to the first value, and margin-left and margin-right to the second value.
    In your .marker CSS rule, set the margin property to 10px auto. */
.marker{
    height: 25px;
    width: 200px;
    margin:auto;
    margin: 10px auto;
}
    /* If you add multiple classes to an HTML element, the styles of the first classes you list may be overridden by later classes. */
    /*You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.
    A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.
    One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.
    In the .red CSS rule, change the background-color property to background.  */
    /* The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:
    linear-gradient(gradientDirection, color1, color2, ...);
    gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.
    Now you'll apply a red-to-green gradient along a 90 degree line to the first marker.
    First, in the .red CSS rule, set the background property to linear-gradient(), and pass it the value 90deg as the gradientDirection. */
    /* You'll use the rgb function for the colors of this gradient.
    In the linear-gradient function, use the rgb function to set the first color argument to pure red. */
    /* You won't see gradient yet because the linear-gradient function needs at least two color arguments to work.
    In the same linear-gradient function, use the rgb function to set the second color argument to pure green. */
    /* .red {
    background: linear-gradient(90deg, rgb(255, 0, 0),rgb(0,0,255));} 

    Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.
    For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:
    linear-gradient(90deg, red 90%, black);
    In the linear-gradient function, add a 75% color stop after the first red color argument. Do not add color stops to the other colors arguments.*/
    /* Now that the color-stops are set, you'll apply different shades of red to each color argument in the linear-gradient function. The shades on the top and bottom edges of the marker will be darker, while the one in the middle will be lighter, as if there's a light above it.
    For the first color argument, which is currently pure red, update the rgb function so the value for red is 122, the value for green is 74, and the value for blue is 14. */
    /* Start by adding a simple shadow to the red marker.
    In the .red CSS rule, add the box-shadow property with the values 5px for offsetX, 5px for offsetY, and red for color. */

.red{
    background: linear-gradient(/* 180deg, */rgb(122,74,14)/* 0% */,rgb(245,62,113)/* 50% */,rgb(162,27,27)/* 100% */);/* even I commented the percent values,still the marker is same with previous shape(explained it in comment above green class) */
    box-shadow: 0px 0px 20px 0 rgba(83,14,14,0.8);
}
    /* A function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:
    rgb(red, green, blue);
    Each red, green, and blue value is a number from 0 to 255. 0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color.
    In the .one CSS rule, replace the color keyword red with the rgb function. For the rgb function, set the value for red to 255, the value for green to 0, and the value for blue to 0. */
    /* While the red and blue markers look the same, the green one is much lighter than it was before. This is because the green color keyword is actually a darker shade, and is about halfway between black and the maximum value for green.
    In the .two CSS rule, set the green value in the rgb function to 127 to lower its intensity. */
    /* Hex color values start with a # character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, #4B5320. */
    /* You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
    With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0). */
    /* Even without the color-stops, you might have noticed that the colors for the green marker transition at the same points as the red marker. The first color is at the start (0%), the second is in the middle (50%), and the last is at the end (100%) of the gradient line.
    The linear-gradient function automatically calculates these values for you, and places colors evenly along the gradient line by default.*/
    /* Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:
    box-shadow: offsetX offsetY blurRadius color;
    If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.
    In the .green CSS rule, add the box-shadow property with the values 5px for offsetX, 5px for offsetY, 5px for blurRadius, and green for color. */
.green{
    background: linear-gradient(/* 180deg, */ #55680D, #71F53E, #116C31);
    box-shadow: 0 0 20px 0 #3B7E20CC;
}
    /* If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default. */
    /* But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:
    box-shadow: offsetX offsetY blurRadius spreadRadius color;
    Like blurRadius, spreadRadius defaults to 0 if it isn't included.
    Practice by adding a 5 pixel shadow directly around the blue marker.
    In the .blue CSS rule, add the box-shadow property with the values 0 for offsetX, 0 for offsetY, 0 for blurRadius, 5px for spreadRadius, and blue for color. */
.blue{
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%),hsl(240,56%,42%));
    box-shadow: 0 0 20px 0 hsla(223,59%,31%,0.8);
}
    /* Now add a little more vertical space between your markers and the edge of the container element they're in.
    In the .container CSS rule, use the shorthand padding property to add 10px of top and bottom padding, and set the left and right padding to 0. This works similarly to the shorthand margin property you used earlier. */
.container{
    background-color: rgb(255, 255, 255);
    padding:10px 0;
}
    /* body{
    background: linear-gradient(0deg,orange 90% , red);
    } */
    /* Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.
    With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.
    In the .sleeve CSS rule, set the opacity property to 0.5. 
    Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.*/
    /* You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.
    The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:
    rgba(redValue, greenValue, blueValue, alphaValue); */
    /* Your border should be visible now. If no color is set, black is used by default.
    But to make your code more readable, it's better to set the border color explicitly.
    In the .sleeve CSS rule, add the border-left-color property with the value black. */
    /* The border-left shorthand property lets you to set the left border's width, style, and color at the same time.
    Here is the syntax:
    border-left: width style color; */
.sleeve{
    height: 25px;
    width: 110px;
    background-color:rgb(255, 255, 255,0.5);
    /* opacity:0.5; */
    /* border-left-width: 10px;
    border-left-style: solid;
    border-left-color: black; */
    border-left:10px double rgba(0,0,0,75%);
}
.cap{
    height:25px;
    width:60px;
}
    /* It looks like your sleeve disappeared, but don't worry -- it's still there. What happened is that your new cap div is taking up the entire width of the marker, and is pushing the sleeve down to the next line.
    This is because the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other.
    To position two div elements on the same line, set their display properties to inline-block.
    Create a new rule to target both the cap and sleeve classes, and set display to inline-block. */
    /* In the last project, you learned a little bit about borders and the border-color property.
    All HTML elements have borders, though they're usually set to none by default. With CSS, you can control all aspects of an element's border, and set the border on all sides, or just one side at a time. For a border to be visible, you need to set its width and style.
    In the .sleeve CSS rule, add the border-left-width property with the value 10px. */
.cap,.sleeve{
    display: inline-block;
}
    /* The last thing you'll do is add a slight shadow to each marker to make them look even more realistic.
    The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:
    box-shadow: offsetX offsetY color;
    Here's how the offsetX and offsetY values work:
    both offsetX and offsetY accept number values in px and other CSS units
    a positive offsetX value moves the shadow right and a negative value moves it left
    a positive offsetY value moves the shadow down and a negative value moves it up
    if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change.
    The height and width of the shadow is determined by the height and width of the element it's applied to. You can also use an optional spreadRadius value to spread out the reach of the shadow. More on that later. */
